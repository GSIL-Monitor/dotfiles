"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cosmtrek's vimrc
" ---------------------------------------------------------
" Firstly, run the following command to install vim-plug:
"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" How to debug?
"   vim --startup-time vim.log
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible

call plug#begin('~/.vim/plugged')
Plug 'junegunn/seoul256.vim'
Plug 'mhinz/vim-startify'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'terryma/vim-multiple-cursors'
Plug 'Valloric/YouCompleteMe'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-ragtag'
Plug 'othree/html5.vim'
Plug 'mattn/emmet-vim'
Plug 'tmhedberg/matchit'
Plug 'jiangmiao/auto-pairs'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/NERDCommenter'
Plug 'fatih/vim-go'
Plug 'vim-ruby/vim-ruby'
Plug 'pangloss/vim-javascript'
call plug#end()

filetype plugin indent on
syntax enable
syntax on
set encoding=utf8
let $LANG='en'
set langmenu=en
set wildmenu
set wildmode=list:full
set wildignorecase
set laststatus=2
set backspace=eol,start,indent
set autoread
set autowrite
set nobackup
set nowb
set noswapfile
set ruler
set cmdheight=2
set hidden
set whichwrap+=<,>,h,l
set ignorecase
set smartcase
set hlsearch
set incsearch
set magic
set showmatch
set history=100
set gcr=a:blinkon0
set noerrorbells
set novisualbell
set t_vb=
set relativenumber
set numberwidth=2
set scrolloff=5
set mouse=a
set ffs=unix,dos,mac
set lazyredraw
set ttyfast
set pumheight=20
set timeout timeoutlen=5000 ttimeoutlen=100

function! s:SID_PREFIX() abort
    return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction
set title titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
	set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
	set wildignore+=.git\*,.hg\*,.svn\*
endif

if has("gui_running")
	set guioptions-=T   "toolbar
	set guioptions-=r   "scrollbar
	set guioptions-=L
	set guioptions-=e
	set guioptions-=b
	set guioptions-=m   "menubar
	set t_Co=256
    set guifont=Source\ Code\ Pro\ for\ Powerline:h12
endif

" color options
if has("gui_running")
    colorscheme solarized
    set background=light
else
    let g:seoul256_background = 233
    colorscheme seoul256
    set background=dark
endif

let mapleader = "\<Space>"
nnoremap <space> <nop>
inoremap jk <esc>

augroup MyAutoCmd
    autocmd!
    " Disable paste
    autocmd InsertLeave *
      \ if &paste | setlocal nopaste | echo 'nopaste' | endif |
      \ if &l:diff | diffupdate | endif
augroup END

nnoremap <leader>w :w!<cr>
nnoremap <leader>q :q<cr>

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk
" Emacs style :)
inoremap <C-n> <down>
inoremap <C-p> <up>
inoremap <C-a> <home>
inoremap <C-e> <end>
" Remap Vim 0 to first non-blank character
nnoremap 0 ^
nnoremap e $
" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>
" Paste in a new line
nnoremap P :pu<cr>

" Close the current buffer and move to the previous one
nnoremap <esc>b :bp <BAR> bd #<cr>

" Useful mappings for managing tabs
map te :tabedit<space>
map th :tab<space>help<space>
map <leader>, :tabprev<cr>
map <leader>. :tabnext<cr>

" https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally
" More natural split opening
set splitbelow
set splitright
set winwidth=30
set winheight=1
set previewheight=8
set helpheight=12

" Resize windows
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

" Smart way to move between windows
" <C-W>r swap the only two windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Copy & paste to system clipboard
set clipboard=unnamed

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" :W sudo saves the file
command W w !sudo tee % > /dev/null

" ctags path
set tags=./tags,tags;

set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4
augroup spacetab
    autocmd!
    autocmd BufRead,BufNewFile *.c set ts=4 sw=4 et sts=4
    autocmd BufRead,BufNewFile *.h set ts=4 sw=4 et sts=4
    autocmd BufRead,BufNewFile *.m set ts=4 sw=4 et sts=4
    autocmd BufRead,BufNewFile *.py set ts=4 sw=4 et sts=4
    autocmd BufRead,BufNewFile *.js set ts=4 sw=4 et sts=4
    autocmd BufRead,BufNewFile *.css set ts=2 sw=2 et sts=2
    autocmd BufRead,BufNewFile *.scss set ts=2 sw=2 et sts=2
    autocmd BufRead,BufNewFile *.html set ts=2 sw=2 et sts=2
    autocmd BufRead,BufNewFile *.xml set ts=4 sw=4 et sts=4 ai
    autocmd BufRead,BufNewFile *.json set ts=4 sw=4 et sts=4 ai
    autocmd BufRead,BufNewFile *.rb set ts=2 sw=2 et sts=2 ai
    autocmd BufRead,BufNewFile *.go set ts=4 sw=4 ai
    autocmd BufRead,BufNewFile *.yml set ts=2 sw=2 et sts=2 ai
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Startify
let g:startify_custom_header =
  \ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val')

" vim-better-whitespace
highlight ExtraWhitespace ctermbg=Red
autocmd MyAutoCmd BufWritePre * StripWhitespace

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#whitespace#enabled = 0

" Fugitive
autocmd MyAutoCmd BufReadPost fugitive://* set bufhidden=delete

" Gitgutter
set updatetime=300
let g:gitgutter_sign_column_always = 1

" CtrlP
nnoremap <esc>. :CtrlPTag<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>r :CtrlPMRU<cr>
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \}
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_max_depth = 10

" YCM
set completeopt-=preview
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \}

" Go
let g:go_fmt_autosave = 1
let g:go_fmt_fail_silently = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:go_list_type = "quickfix"
let g:golang_goroot="/usr/local/go"
autocmd FileType go nmap <Leader>gs <Plug>(go-implements)
autocmd FileType go nmap <Leader>gi <Plug>(go-info)

" Vue
autocmd BufRead,BufNewFile *.vue set filetype=html

" Emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css,eruby EmmetInstall
